#!/usr/bin/env python2
# -*- coding:utf-8 -*-

"""
Python Script used to communicate with Ghidra's API.
It will extract specific features of a defined binary and
save the result into features.json.
"""

import json
from ghidra.app.script import GhidraScript

class ExtractFeaturesScript(GhidraScript):

    def get_code_data_ratio(self):
        """Calculate the code to data ratio."""
        memory = currentProgram.getMemory()
        code_size = 0
        data_size = 0
        for block in memory.getBlocks():
            if block.isExecute():
                code_size += block.getSize()
            else:
                data_size += block.getSize()
        return code_size, data_size, float(code_size) / (code_size + data_size)

    def run(self):
        # Get the current file name
        file_name = currentProgram.getExecutablePath()
        self.println("Processing file: {}".format(file_name))

        # Initialize the output dictionary
        output = {}

        # Get the function manager
        functionManager = currentProgram.getFunctionManager()

        # Count the number of functions
        functions = list(functionManager.getFunctions(True))
        function_count = len(functions)
        self.println("Function count: {}".format(function_count))

        # Get imports
        importManager = currentProgram.getExternalManager()
        imports = list(importManager.getExternalLibraryNames())
        import_count = len(imports)
        self.println("Import count: {}".format(import_count))

        # Get exports
        symbolTable = currentProgram.getSymbolTable()
        exports = list(symbolTable.getExternalSymbols())
        export_count = len(exports)
        self.println("Export count: {}".format(export_count))

        # Get code and data sizes and their ratio
        code_size, data_size, code_data_ratio = self.get_code_data_ratio()
        self.println("Code size: {}, Data size: {}, Code/Data ratio: {}".format(code_size, data_size, code_data_ratio))

        # Add the features to the output dictionary
        output["file_name"] = file_name
        output["function_count"] = function_count
        output["import_count"] = import_count
        output["export_count"] = export_count
        output["code_size"] = code_size
        output["data_size"] = data_size
        output["code_data_ratio"] = code_data_ratio

        # Specify the output path
        output_path = "./data/tmp_ghidra_features.json"

        # Save the output dictionary to a JSON file
        with open(output_path, "w") as f:
            json.dump(output, f)

        # Print to confirm the script ran successfully
        self.println("Features extracted and saved to {}".format(output_path))

# Create an instance of the script and run it
script = ExtractFeaturesScript()
script.run()
