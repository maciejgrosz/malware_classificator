import argparse
import json

import pandas as pd
from joblib import load

# def preprocess_data(df):
#    df.fillna(0, inplace=True)
#    if "file_extension" in df.columns:
#        one_hot = pd.get_dummies(df["file_extension"])
#        df = df.drop("file_extension", axis=1)
#        df = df.join(one_hot)
#    return df


# Load feature names from the text file
def load_feature_names(feature_names_file):
    with open(feature_names_file, "r") as file:
        feature_names = [line.strip() for line in file.readlines()]
    return feature_names


# Merge JSON data with the feature names
def merge_features(data, feature_names):
    for feature in feature_names:
        if feature not in data:
            data[feature] = 0
    return data


# Reorder features alphabetically
def reorder_features(data):
    ordered_data = {key: data[key] for key in sorted(data.keys())}
    return ordered_data


def classify_json_file(model_path, json_file_path, feature_names_file):
    # Load the trained model
    model = load(model_path)

    # Load the JSON file
    try:
        with open(json_file_path) as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON file {json_file_path}: {e}")
        return
    except Exception as e:
        print(f"Error reading file {json_file_path}: {e}")
        return

    # Load feature names from the file
    feature_names = load_feature_names(feature_names_file)

    # Merge the JSON data with the feature names
    merged_data = reorder_features(merge_features(data, feature_names))

    # Convert JSON data to DataFrame
    df = pd.DataFrame([merged_data])

    # Preprocess the DataFrame
    # df = preprocess_data(df)

    # Make prediction
    try:
        prediction = model.predict(df)
    except Exception as e:
        print(f"Error during prediction: {e}")
        return
    return prediction[0]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Classify a single JSON file using a trained Random Forest model."
    )
    parser.add_argument("model_path", help="Path to the trained model file")
    parser.add_argument("json_file_path", help="Path to the JSON file to be classified")

    args = parser.parse_args()

    predicted_class = classify_json_file(
        args.model_path, args.json_file_path, "./feature_names.txt"
    )
    if predicted_class is not None:
        print(f"Predicted class: {predicted_class}")
