import argparse
import json

import pandas as pd
from joblib import load


def preprocess_data(df):
    df.fillna(0, inplace=True)
    if "file_extension" in df.columns:
        one_hot = pd.get_dummies(df["file_extension"])
        df = df.drop("file_extension", axis=1)
        df = df.join(one_hot)
    return df


def classify_json_file(model_path, json_file_path):
    # Load the trained model
    model = load(model_path)

    # Load the JSON file
    try:
        with open(json_file_path) as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON file {json_file_path}: {e}")
        return
    except Exception as e:
        print(f"Error reading file {json_file_path}: {e}")
        return

    # Convert JSON data to DataFrame
    df = pd.DataFrame([data])

    # Preprocess the DataFrame
    df = preprocess_data(df)

    # Drop columns not used in training
    df = df.drop(columns=["path", "md5", "sha1", "sha256", "label"], errors="ignore")

    # Make prediction
    try:
        prediction = model.predict(df)
    except Exception as e:
        print(f"Error during prediction: {e}")
        return
    return prediction[0]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Classify a single JSON file using a trained Random Forest model."
    )
    parser.add_argument("model_path", help="Path to the trained model file")
    parser.add_argument("json_file_path", help="Path to the JSON file to be classified")

    args = parser.parse_args()

    predicted_class = classify_json_file(args.model_path, args.json_file_path)
    if predicted_class is not None:
        print(f"Predicted class: {predicted_class}")
