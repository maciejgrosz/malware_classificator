import argparse
import glob
import json
import os


def flatten_json(data, label):
    flattened_data = {
        "file_extension": os.path.splitext(data["path"])[-1],
        "code_data_ratio": data.get("code_data_ratio", 0),
        "capability_data_size": data.get("data_size", 0),
        "capability_code_size": data.get("code_size", 0),
        "capability_function_count": data.get("function_count", 0),
        "capability_export_count": data.get("export_count", 0),
        "capability_import_count": data.get("import_count", 0),
        "label": label,
    }

    for section, values in data.get("sections", {}).items():
        flattened_data[f"section_{section}_size"] = values.get("size", 0)

    for capability, count in data.items():
        if capability not in [
            "path",
            "md5",
            "sha1",
            "sha256",
            "os",
            "data_size",
            "code_size",
            "code_data_ratio",
            "function_count",
            "export_count",
            "import_count",
            "sections",
        ]:
            flattened_data[f"capability_{capability}"] = count

    return flattened_data


def process_file(file_path, label, output_directory):
    try:
        with open(file_path, "r") as file:
            data = json.load(file)
            flattened_data = flatten_json(data, label)
            base_name = os.path.basename(file_path)
            output_path = os.path.join(output_directory, base_name)
            with open(output_path, "w") as output_file:
                json.dump(flattened_data, output_file, indent=4)
    except json.JSONDecodeError:
        print(f"Skipping file {file_path}: not a valid JSON.")
    except Exception as e:
        print(f"Error processing file {file_path}: {e}")


def process_directory(directory, label, output_directory):
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
    for file_path in glob.glob(os.path.join(directory, "*.json")):
        process_file(file_path, label, output_directory)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Format JSON data for classifier training."
    )
    parser.add_argument("input", type=str, help="Input file or directory.")
    parser.add_argument(
        "label", type=str, choices=["malware", "benign"], help="Label for the data."
    )
    parser.add_argument(
        "output_directory", type=str, help="Output directory for formatted files."
    )

    args = parser.parse_args()

    if os.path.isfile(args.input):
        process_file(args.input, args.label, args.output_directory)
    elif os.path.isdir(args.input):
        process_directory(args.input, args.label, args.output_directory)
    else:
        print("Invalid input. Please provide a valid file or directory.")
