import json
import os

import pandas as pd
from sklearn.feature_extraction import DictVectorizer
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB


def load_json_files(directory):
    data = []
    labels = []
    for filename in os.listdir(directory):
        if filename.endswith(".json"):
            file_path = os.path.join(directory, filename)
            try:
                with open(file_path, "r") as file:
                    file_data = json.load(file)
                    status = file_data.pop("status", None)
                    if status:
                        flattened_data = flatten_json(file_data)
                        data.append(flattened_data)
                        labels.append(status)
            except json.JSONDecodeError:
                print(f"Skipping file {file_path}: not a valid JSON.")
    return data, labels


def flatten_json(y):
    out = {}

    def flatten(x, name=""):
        if type(x) is dict:
            for a in x:
                flatten(x[a], name + a + "_")
        else:
            out[name[:-1]] = x

    flatten(y)
    return out


def extract_features(data):
    vectorizer = DictVectorizer(sparse=False)
    features = vectorizer.fit_transform(data)
    return features, vectorizer


def main():
    # Load JSON files
    benign_data, benign_labels = load_json_files("../safe_data")
    malware_data, malware_labels = load_json_files("../malware_data")

    # Combine data and labels
    data = benign_data + malware_data
    labels = benign_labels + malware_labels

    # Extract features
    features, vectorizer = extract_features(data)

    # Split data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(
        features, labels, test_size=0.2, random_state=42
    )

    # Train Naive Bayes classifier
    clf = MultinomialNB()
    clf.fit(X_train, y_train)

    # Evaluate the classifier
    y_pred = clf.predict(X_test)
    print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
    print(classification_report(y_test, y_pred))


if __name__ == "__main__":
    main()
