import boto3
import os
import argparse

def download_files_from_s3(bucket_name, output_directory):
    # Initialize S3 client (it will automatically use IAM role credentials)
    s3 = boto3.client('s3')

    # Create output directory if it doesn't exist
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    # List objects in the bucket
    objects = s3.list_objects_v2(Bucket=bucket_name)

    # Iterate through the objects
    for obj in objects.get('Contents', []):
        key = obj['Key']
        # Check if the object has the 'scan_result' tag
        tags = s3.get_object_tagging(Bucket=bucket_name, Key=key).get('TagSet', [])
        tag_keys = [tag['Key'] for tag in tags]

        if 'scan_result' not in tag_keys:
            # Download the file
            local_path = os.path.join(output_directory, key)
            local_dir = os.path.dirname(local_path)
            if not os.path.exists(local_dir):
                os.makedirs(local_dir)
            s3.download_file(bucket_name, key, local_path)
            print(f"Downloaded {key} to {local_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Download files from S3 bucket without 'scan_result' tag.")
    parser.add_argument("bucket", type=str, help="Name of the S3 bucket.")
    parser.add_argument("output_directory", type=str, help="Output directory for downloaded files.")

    args = parser.parse_args()

    download_files_from_s3(args.bucket, args.output_directory)

